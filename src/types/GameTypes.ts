/**
 * üéÆ TYPES TYPESCRIPT POUR DOGE ASTRONAUT
 * 
 * Ce fichier contient toutes les d√©finitions de types pour le jeu.
 * Il assure la coh√©rence des donn√©es et facilite le d√©veloppement avec IntelliSense.
 * 
 * üèóÔ∏è ORGANISATION :
 * - Types de base (Position, Velocity)
 * - Entit√©s de jeu (Player, Obstacle, Collectible)
 * - √âtat du jeu (GameState, ShopState)
 * - Syst√®me de pouvoirs (PowerUp)
 * - Effets visuels (Particle)
 * 
 * üì± ADAPTATIONS MOBILES :
 * Ces types sont con√ßus pour √™tre compatibles mobile.
 * Aucune modification n√©cessaire pour la version mobile.
 */

// üéØ TYPES DE BASE POUR LA G√âOM√âTRIE

/**
 * Position 2D dans l'espace de jeu
 * Utilis√© pour tous les objets ayant une position
 */
export interface Position {
  x: number;  // Position horizontale en pixels
  y: number;  // Position verticale en pixels
}

/**
 * V√©locit√© 2D pour la physique
 * Utilis√© pour le mouvement et les calculs de physique
 */
export interface Velocity {
  x: number;  // Vitesse horizontale en pixels/frame
  y: number;  // Vitesse verticale en pixels/frame
}

// üéÆ ENTIT√âS DE JEU

/**
 * Objet de jeu de base
 * Interface partag√©e par tous les objets physiques du jeu
 */
export interface GameObject {
  position: Position;  // Position actuelle dans le monde
  velocity: Velocity;  // Vitesse de d√©placement
  width: number;       // Largeur pour les collisions
  height: number;      // Hauteur pour les collisions
  active: boolean;     // L'objet est-il actif dans le jeu ?
}

/**
 * Joueur principal (Doge Astronaut)
 * H√©rite de GameObject avec des propri√©t√©s sp√©cifiques au joueur
 */
export interface Player extends GameObject {
  isJumping: boolean;   // Le joueur est-il en train de sauter ?
  isGrounded: boolean;  // Le joueur touche-t-il le sol ?
  jumpCount: number;    // Nombre de sauts effectu√©s (0 ou 1)
  maxJumps: number;     // Nombre maximum de sauts autoris√©s (fix√© √† 1)
}

/**
 * Obstacles √† √©viter
 * Diff√©rents types avec propri√©t√©s d'animation
 */
export interface Obstacle extends GameObject {
  type: 'meteorite' | 'rock' | 'flag';  // Type d'obstacle d√©termine l'apparence
  rotation: number;                      // Rotation actuelle (pour m√©t√©orites)
  rotationSpeed: number;                 // Vitesse de rotation
}

/**
 * Objets √† collecter (os)
 * Avec syst√®me d'animation et de magn√©tisme
 */
export interface Collectible extends GameObject {
  type: 'coin';              // Type de collectible (actuellement seulement 'coin' pour les os)
  collected: boolean;        // L'objet a-t-il √©t√© collect√© ?
  animation: number;         // Frame d'animation pour l'effet flottant
  value: number;             // Valeur en points (g√©n√©ralement 10)
  magnetized?: boolean;      // L'objet est-il attir√© par l'aimant magn√©tique ?
}

// ‚ú® SYST√àME DE PARTICULES

/**
 * Particule pour les effets visuels
 * Utilis√© pour les explosions, collections, etc.
 */
export interface Particle {
  position: Position;  // Position actuelle de la particule
  velocity: Velocity;  // Vitesse de d√©placement
  life: number;        // Dur√©e de vie restante (en frames)
  maxLife: number;     // Dur√©e de vie maximale (pour le fade)
  color: string;       // Couleur CSS de la particule
  size: number;        // Taille en pixels
}

// üéÆ √âTAT DU JEU

/**
 * √âtat global du jeu
 * Contient toutes les informations sur la partie en cours
 */
export interface GameState {
  isPlaying: boolean;   // Le jeu est-il en cours ?
  score: number;        // Score de la session actuelle
  coins: number;        // Os collect√©s dans la session actuelle
  highScore: number;    // Meilleur score de tous les temps
  highCoins: number;    // Meilleur nombre d'os en une session
  gameOver: boolean;    // La partie est-elle termin√©e ?
  level: number;        // Niveau actuel (non utilis√© actuellement)
}

// üõí SYST√àME DE BOUTIQUE ET POUVOIRS

/**
 * Pouvoir achetable dans la boutique
 * Syst√®me avec utilisations limit√©es et dur√©es
 */
export interface PowerUp {
  id: string;                    // Identifiant unique du pouvoir
  name: string;                  // Nom affich√© dans l'interface
  description: string;           // Description d√©taill√©e du pouvoir
  cost: number;                  // Co√ªt en os pour acheter le pouvoir
  icon: string;                  // Emoji ou ic√¥ne pour l'affichage
  owned: boolean;                // Le joueur poss√®de-t-il ce pouvoir ?
  active: boolean;               // Le pouvoir est-il actuellement actif ?
  duration?: number;             // Dur√©e en secondes (optionnel pour les pouvoirs permanents)
  usesRemaining?: number;        // Nombre d'utilisations restantes
  maxUses?: number;              // Nombre maximum d'utilisations par achat
}

/**
 * √âtat de la boutique de pouvoirs
 * G√®re l'ouverture/fermeture et la liste des pouvoirs
 */
export interface ShopState {
  isOpen: boolean;              // La boutique est-elle ouverte ?
  availablePowers: PowerUp[];   // Liste de tous les pouvoirs disponibles
}